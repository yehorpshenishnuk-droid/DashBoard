import os
import time
import requests
import sys
from datetime import date
from flask import Flask, render_template_string, jsonify

app = Flask(__name__)

POSTER_TOKEN = os.getenv("POSTER_TOKEN")
ACCOUNT_NAME = "poka-net3"  # —Ç–≤–æ–π –ø–æ–¥–¥–æ–º–µ–Ω Poster

# –°–ø–∏—Å–æ–∫ –≥–æ—Ä—è—á–µ–≥–æ —Ü–µ—Ö–∞ (id: –Ω–∞–∑–≤–∞–Ω–∏–µ)
HOT_DISHES = {
    14: "–ß–µ–±—É—Ä–µ–∫ –∑ –º–æ—Ü–∞—Ä–µ–ª–æ—é —Ç–∞ —Å—É–ª—É–≥—É–Ω—ñ",
    8: "–ß–µ–±—É—Ä–µ–∫ –∑ —Ç–µ–ª—è—Ç–∏–Ω–æ—é",
    243: "–ß–µ–±—É—Ä–µ–∫ –∑ —Ç–æ–º–∞—Ç–∞–º–∏ —Ç–∞ –≥—Ä–∏–±–∞–º–∏",
    327: "–ß–µ–±—É—Ä–µ–∫ –∑ –≤–∏—à–Ω–µ—é —Ç–∞ –≤–µ—Ä—à–∫–æ–≤–∏–º –∫—Ä–µ–º —Å–∏—Ä–æ–º",
    347: "–ß–µ–±—É—Ä–µ–∫ –∑ –±–∞—Ä–∞–Ω–∏–Ω–æ—é",
    12: "–ß–µ–±—É—Ä–µ–∫ –∑ —Å–≤–∏–Ω–∏–Ω–æ—é",
    13: "–ß–µ–±—É—Ä–µ–∫ –∑ –∫—É—Ä–∫–æ—é",
    515: "–¢–µ–ª—è—á—ñ —â—ñ—á–∫–∏ –∑ –∫–∞—Ä—Ç–æ–ø–ª—è–Ω–∏–º –ø—é—Ä–µ, 330 –≥",
    244: "–Ø–Ω—Ç–∏–∫ –∑ —Ç–æ–º–∞—Ç–∞–º–∏ —Ç–∞ –≥—Ä–∏–±–∞–º–∏",
    502: "–Ø–Ω—Ç–∏–∫ –∑ —Ñ–µ—Ä–º–µ—Ä—Å—å–∫–∏–º —Å–∏—Ä–æ–º —ñ –∑–µ–ª–µ–Ω–Ω—é",
    349: "–Ø–Ω—Ç–∏–∫ –∑ –±–∞—Ä–∞–Ω–∏–Ω–æ—é",
    74: "–Ø–Ω—Ç–∏–∫ –∑ —Å–≤–∏–Ω–∏–Ω–æ—é",
    73: "–Ø–Ω—Ç–∏–∫ –∑ –∫—É—Ä–∫–æ—é",
    75: "–Ø–Ω—Ç–∏–∫ –∑ –º–æ—Ü–∞—Ä–µ–ª–æ—é —Ç–∞ —Å—É–ª—É–≥—É–Ω—ñ",
    76: "–Ø–Ω—Ç–∏–∫ –∑ —Ç–µ–ª—è—Ç–∏–Ω–æ—é",
    375: "–Ø–Ω—Ç–∏–∫ –∑ —Ç–µ–ª—è—Ç–∏–Ω–æ—é —Ç–∞ —Å–∏—Ä–æ–º —á–µ–¥–µ—Ä",
    154: "–ü–ª–æ–≤ —è–∫–∏–π –í–∏ –ø–æ–ª—é–±–∏—Ç–µ",
    210: "–ü—ñ–¥–µ –∑ —Ç–µ–ª—è—Ç–∏–Ω–æ—é",
    545: "–ü—ñ–¥–µ –∑ –º–æ—Ü–∞—Ä–µ–ª–æ—é, —Ç–æ–º–∞—Ç–∞–º–∏ —Ç–∞ –ø–µ—Å—Ç–æ",
    290: "–õ—é–ª—è-–∫–µ–±–∞–± –∑ —Ç—Ä—å–æ–º–∞ –≤–∏–¥–∞–º–∏ –º'—è—Å–∞",
    528: "–ù—ñ–∂–Ω–µ –∫—É—Ä—è—á–µ —Å—Ç–µ–≥–Ω–æ –≥—Ä–∏–ª—å, 360 –≥",
    296: "–ú'—è—Å–Ω–∏–π —Å–µ—Ç 1,770",
    325: "–õ—é–ª—è-–∫–µ–±–∞–± –∑ —Å–∏—Ä–æ–º —Ç–∞ —Ç—Ä—å–æ–º–∞ –≤–∏–¥–∞–º–∏ –º'—è—Å–∞",
    295: "–†–µ–±–µ—Ä—Ü—è –≤ –º–µ–¥–æ–≤–æ-–≥—ñ—Ä—á–∏—á–Ω–æ–º—É —Å–æ—É—Å—ñ",
    222: "–¢–µ–ª—è—Ç–∏–Ω–∞ –Ω–∞ –≥—Ä–∏–ª—ñ",
    72: "–§—ñ–ª–µ –º–æ–ª–æ–¥–æ—ó –∫—É—Ä–∫–∏",
    71: "–®–∏–π–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ —Å–≤–∏–Ω–∏–Ω–∏",
    209: "–ü—ñ–¥–µ –∑ –∫—É—Ä–∫–æ—é —Ç–∞ —Ç–æ–º–∞—Ç–∞–º–∏",
    360: "–°–∏—Ä–Ω–µ –ø—ñ–¥–µ –∑ —ñ–Ω–∂–∏—Ä–æ–º —Ç–∞ —Ñ—ñ—Å—Ç–∞—à–∫–æ—é",
    208: "–ü—ñ–¥–µ –∑ —Å–∏—Ä–æ–º —Ç–∞ —á–∞—Å–Ω–∏–∫–æ–≤–∏–º —Å–æ—É—Å–æ–º",
}

last_update = 0
hot_data = {}


def fetch_sales():
    """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∏–∑ Poster API –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"""
    today = date.today().strftime("%Y-%m-%d")
    url = (
        f"https://{ACCOUNT_NAME}.joinposter.com/api/dash.getProductsSales"
        f"?token={POSTER_TOKEN}&date_from={today}&date_to={today}"
    )

    resp = requests.get(url)
    print("DEBUG Poster API response:", resp.text[:300], file=sys.stderr, flush=True)

    try:
        data = resp.json().get("response", [])
    except Exception as e:
        print("ERROR parsing JSON:", e, file=sys.stderr, flush=True)
        return {"total": 0, "top3": [("–û—à–∏–±–∫–∞", 0)]}

    sales_count = {}
    total_orders = 0

    for item in data:
        try:
            product_id = int(item.get("product_id", 0))
            quantity = int(float(item.get("count", 0)))
        except Exception:
            continue

        if product_id in HOT_DISHES:
            sales_count[product_id] = sales_count.get(product_id, 0) + quantity
            total_orders += quantity

    top3 = sorted(sales_count.items(), key=lambda x: x[1], reverse=True)[:3]

    return {
        "total": total_orders,
        "top3": [(HOT_DISHES[i], c) for i, c in top3]
    }


@app.route("/api/hot")
def api_hot():
    """API –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (JSON)"""
    global last_update, hot_data
    if time.time() - last_update > 30:
        try:
            hot_data = fetch_sales()
            last_update = time.time()
        except Exception as e:
            hot_data = {"total": 0, "top3": [("–û—à–∏–±–∫–∞", 0)]}
            print("ERROR fetch_sales:", e, file=sys.stderr, flush=True)
    return jsonify(hot_data)


@app.route("/")
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    template = """
    <html>
    <head>
        <style>
            body { font-family: Arial, sans-serif; background: #111; color: #eee; text-align: center; }
            h2 { color: orange; }
            .block { margin: 30px auto; width: 420px; padding: 20px; border: 2px solid orange; border-radius: 10px; }
            .item { font-size: 20px; margin: 5px 0; }
        </style>
    </head>
    <body>
        <div class="block">
            <h2>üî• –ì–∞—Ä—è—á–∏–π –¶–ï–•</h2>
            <p id="total">–í—Å—å–æ–≥–æ: ... –∑–∞–º–æ–≤–ª–µ–Ω—å</p>
            <div id="top3">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>

        <script>
        async function updateData() {
            try {
                const res = await fetch('/api/hot');
                const data = await res.json();

                document.getElementById('total').innerText = "–í—Å—å–æ–≥–æ: " + data.total + " –∑–∞–º–æ–≤–ª–µ–Ω—å";

                let topDiv = document.getElementById('top3');
                topDiv.innerHTML = "üèÜ –¢–û–ü-3 –ø—Ä–æ–¥–∞–∂—ñ:";
                data.top3.forEach((item, index) => {
                    topDiv.innerHTML += `<div class="item">${index+1}) ${item[0]} ‚Äî ${item[1]}</div>`;
                });
            } catch (e) {
                console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", e);
            }
        }

        setInterval(updateData, 30000); // –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        window.onload = updateData;
        </script>
    </body>
    </html>
    """
    return render_template_string(template)


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
